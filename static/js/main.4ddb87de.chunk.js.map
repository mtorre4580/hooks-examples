{"version":3,"sources":["myLib/Toggle/index.js","myLib/Snackbar/index.js","myLib/GifSearchBox/index.js","myLib/BoxResizing/index.js","myLib/WindowSize/index.js","App.js","serviceWorker.js","index.js"],"names":["useState","on","setOn","className","checked","onChange","type","isOffline","setOffline","useEffect","window","addEventListener","removeEventListener","style","visibility","animation","placeholder","query","setQuery","gifs","setGifs","isLoading","setIsLoading","fetchResults","a","fetch","response","json","data","map","gif","name","title","url","images","original","onSubmit","event","preventDefault","noValidate","target","value","length","index","key","src","alt","divRef","useRef","startResizing","e","current","width","clientX","offsetLeft","height","clientY","offsetTop","stopResizing","currentDiv","ref","isClient","getCurrentSize","innerWidth","undefined","innerHeight","windowSize","setWindowSize","handleResize","App","useWindowSize","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ddb87de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./index.css\";\n\n/**\n * Ejemplo hook useState\n * El hook \"useState\" permite tener un state en un componente funcional\n * sin tener que ser un componente de clase, recibe un valor default useState(value),\n * donde value puede ser un primitivo como un object, viene a ser al this.state = {} que hacemos\n * en el constructor de la clase\n * const [miGet, miSet] = useState(miProperty)\n */\nexport default function() {\n  //Se utiliza el basico useState para setear un state al componente si esta encendido o apagado\n  const [on, setOn] = useState(false);\n  return (\n    <div className=\"container-wrap\">\n      <label>\n        <input\n          checked={on}\n          onChange={() => setOn(!on)}\n          className=\"switch\"\n          type=\"checkbox\"\n        />\n        <div>\n          <div></div>\n        </div>\n      </label>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\n\n/**\n * Ejemplo hook useEffect, Permite hacer algun efecto secundario a un componente funcional\n * Podemos manipular el DOM manualmente, como hariamos con un componente de clase en el didmount\n * Podemos hacer algun efecto al cambiar alguna prop o algo del state, como hariamos con el didUpdate\n * El useEffect puedo hacer un fetch, tambien permite retornar una función que va servir como saneamiento.\n * En este caso antes de desmontar el componente , remuevo el event listener del offline...\n */\nexport default function() {\n  const [isOffline, setOffline] = useState(false);\n\n  //Al montarse el componente se hace un attach del evento offline para manejar el snackbar\n  useEffect(() => {\n    window.addEventListener(\n      \"offline\",\n      () => {\n        setOffline(true);\n      },\n      false\n    );\n\n    window.addEventListener(\n      \"online\",\n      () => {\n        setOffline(false);\n      },\n      false\n    );\n\n    return () => {\n      //Al salir del effect, hacemos un detach del evento, lo mismo que pondriamos en el evento willunmount al irse...\n      window.removeEventListener(\"offline\", () => setOffline(false), false);\n    };\n  });\n\n  return (\n    <div>\n      {!isOffline && (\n        <div className=\"default\">\n          Desconecta internet para mostrarte algo (=\n        </div>\n      )}\n      <div\n        style={{\n          visibility: isOffline ? \"visible\" : \"hidden\",\n          animation: \"fadein 0.5s, fadeout 0.5s 2.5s\"\n        }}\n        className=\"snackbar-offline\"\n      >\n        Ups!! sin conexión!!\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./index.css\";\n\n/**\n * Ejemplo hook useState, Permite hacer algun efecto secundario a un componente funcional,\n * Hacemos un fetch al enviar el form para buscar los gifs contra la API de giphy\n */\nexport default function({ placeholder }) {\n  //State del componente query elegida\n  const [query, setQuery] = useState(\"\");\n  //State resultados del gifs\n  const [gifs, setGifs] = useState([]);\n  //State status del cargando...\n  const [isLoading, setIsLoading] = useState(false);\n  const ENDPOINT_GIPHY =\n    \"https://api.giphy.com/v1/gifs/search?api_key=RbKfLnw0XpcE4CqZUq5Hy6an8HqIMj7y&limit=5&offset=0&rating=G&lang=es\";\n\n  const fetchResults = async query => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`${ENDPOINT_GIPHY}&q=${query}`);\n      const { data } = await response.json();\n      const gifs = data.map(gif => ({\n        name: gif.title,\n        url: gif.images.original.url\n      }));\n      setGifs(gifs);\n      setIsLoading(false);\n    } catch (err) {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    fetchResults(query);\n  };\n\n  return (\n    <div className=\"container-searchbox\">\n      <form onSubmit={handleOnSubmit} noValidate>\n        <input\n          className=\"search-input\"\n          type=\"text\"\n          placeholder={placeholder}\n          onChange={event => setQuery(event.target.value)}\n          value={query}\n        />\n        <button className=\"button-input\" type=\"submit\">\n          Buscar\n        </button>\n      </form>\n      {isLoading && <p>Buscando gifs....</p>}\n      {gifs.length > 0 &&\n        gifs.map((gif, index) => (\n          <img className=\"img-gif\" key={index} src={gif.url} alt={gif.name} />\n        ))}\n    </div>\n  );\n}\n","import React, { useRef, useEffect } from \"react\";\nimport \"./index.css\";\n\n/**\n * Hook useRef, en el caso que necesitemos utilizar el famoso React.createRef para realizar\n * alguna manipulacion, por ejemplo en onFocus, o directamente tocar el DOM, podemos utilizar\n * el hook useRef\n */\nexport default function() {\n  const divRef = useRef(null);\n\n  const startResizing = e => {\n    divRef.current.style.width = e.clientX - divRef.current.offsetLeft + \"px\";\n    divRef.current.style.height = e.clientY - divRef.current.offsetTop + \"px\";\n  };\n\n  const stopResizing = () => {\n    window.removeEventListener(\"mousemove\", startResizing, false);\n    window.removeEventListener(\"mouseup\", stopResizing, false);\n  };\n\n  //Al montarse el componente appendeo el evento\n  useEffect(() => {\n    const currentDiv = divRef.current;\n    currentDiv.addEventListener(\n      \"mousedown\",\n      e => {\n        window.addEventListener(\"mousemove\", startResizing, false);\n        window.addEventListener(\"mouseup\", stopResizing, false);\n      },\n      false\n    );\n\n    return () => {\n      currentDiv.removeEventListener(\"mousedown\", {}, false);\n    };\n  });\n\n  return (\n    <div className=\"box\" ref={divRef}>\n      <div>Estirame, soy (Reed Richards)</div>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\n/**\n * Hook custom para detectar la orientación del device, soporta SSR\n */\nexport default function() {\n  //Me fijo si existe window, entonces estoy en el cliente...\n  const isClient = typeof window === \"object\";\n\n  //Levanta el valor default alto y ancho, sino devuelve undefined\n  function getCurrentSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  //Creo un state para setear el valor del window actual...\n  const [windowSize, setWindowSize] = useState(getCurrentSize);\n\n  //Utilizo el effect\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getCurrentSize());\n    }\n\n    //Atacheo el evento resize del browser, para saber si se esta modificando...\n    window.addEventListener(\"resize\", handleResize);\n\n    //Devuelvo una función para el saneamiento, es decir elimino el evento hago un detach\n    return () => window.removeEventListener(\"resize\", handleResize);\n\n  }, []);\n\n  return windowSize;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  Toggle,\n  Snackbar,\n  GifSearchBox,\n  BoxResizing,\n  useWindowSize\n} from \"./myLib\";\n\n\nfunction App() {\n  //Utilizo el hook custom para obtener el valor del window al hacer resize o cambiar de orientación\n  const { height, width } = useWindowSize();\n  return (\n    <div>\n      <header className=\"App-header\">\n        <div className=\"hook-explanation\">\n          <h2>Reglas</h2>\n          <ul>\n            <li>Utilizar los hooks sólo en componentes funcionales</li>\n            <li>No utilizarlo dentro de un for</li>\n            <li>Se deben llamar en el nivel superior</li>\n            <li>\n              No incluir ifs dentro de los effects, rompe la rule mencionada\n              antes\n            </li>\n            <li>\n              Tener en cuenta que el orden de los hooks es primordial ya que\n              React, se basa en el orden de los mismos...\n              <img\n                className=\"bad_practice\"\n                src=\"/assets/bad_hook.png\"\n                alt=\"bad_practice\"\n              />\n            </li>\n            <li>\n              Utilizar el plugin de ESLint para validarlo más fácil{\" \"}\n              <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">\n                Link\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"hook-explanation\">\n          <h2>useState</h2>\n          <p className=\"hook-explanation__text\">\n            Permite tener un estado en un componente funcional\n            <code>[miGet, miSet] = useState(miProperty)</code>\n          </p>\n          <Toggle />\n          <GifSearchBox placeholder=\"Buscar gifs\" />\n        </div>\n        <div className=\"hook-explanation\">\n          <h2>useEffect</h2>\n          <p className=\"hook-explanation__text\">\n            Permite hacer algún efecto secundario a un componente funcional\n          </p>\n          <p>\n            <code>useEffect(() => miFunción);</code>\n          </p>\n          <ul>\n            <li>\n              {\" \"}\n              Si necesitas meter lógica en los lifecycle (componentDidMount,\n              componentDidUpdate, componentWillUnmout)\n            </li>\n            <li>Si necesitas hacer un fetch a una API</li>\n            <li>Si necesitas modificar el DOM manualmente...</li>\n          </ul>\n          <Snackbar />\n        </div>\n        <div className=\"hook-explanation\">\n          <h2>useRef</h2>\n          <p className=\"hook-explanation__text\">\n            Permite hacer una referencia a un elemento, como haciamos con el\n            React.createRef...\n          </p>\n          <p>\n            <code>const miRef = useRef(null);</code>\n          </p>\n          <BoxResizing />\n        </div>\n        <div className=\"hook-explanation\">\n          <h2>useMemo</h2>\n          <p className=\"hook-explanation__text\">\n            Permite convertir un componente funcional a un componente puro,\n            <br /> lo mismo que venimos haciendo con React.PureComponent, solo\n            que en este caso <br /> ya lo podemos hacer con componentes\n            funcionales, se le puede pasar un parametro <br /> para restringir\n            cuando va a calcular, vendria hacer similar al shouldComponent\n          </p>\n          <p>\n            <code>const miComponenteMemoized = useMemo(MiComponente);</code>\n          </p>\n          <p>\n            <code>\n              const memoizedValue = useMemo(() => computeExpensiveValue(a, b),\n              [a, b]);\n            </code>\n          </p>\n        </div>\n        <div className=\"hook-explanation\">\n          <h2>Custom Hook</h2>\n          <p>\n            Podemos crear nuestros hooks para no repetir lógica en componentes,\n            en vez de utilizar un HOC <br /> o el patron render props,\n            directamente creamos nuestro propio hook\n          </p>\n          <p>\n            Para crearlo lo unico que hay que tener en cuenta es que tiene que\n            empezar con el nombre <b>\"use\"</b>\n          </p>\n          <p>\n            Los podes utilizar en toda la aplicación son desacoplados, tienen un\n            estado aislado\n          </p>\n          <p>En mi component funcional utilizo el hook custom</p>\n          <p>\n            <code>const statusWindow = useWindowSize()</code>\n          </p>\n          <p>\n            Esta corriendo el hook del windowSize, rotá tu cel o achica el\n            browser <br /> si estas en desktop para ver el valor actual\n          </p>\n          <p className=\"status-hook-window\">\n            Alto: {height}, Ancho {width}{\" \"}\n          </p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}